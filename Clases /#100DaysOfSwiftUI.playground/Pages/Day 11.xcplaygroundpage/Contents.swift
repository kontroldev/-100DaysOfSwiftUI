import Foundation

/// **CONTROL DE ACCESO - STRUCTURAS segunda parte`


struct BankAccount {
   private(set) var funds = 0
    
    mutating func deposit(amount: Int) {
        funds += amount
    }
    
    mutating func withdraw(amount: Int) -> Bool {
        if funds >= amount {
            funds -= amount
            return true
        } else {
            return false
        }
    }
}

//Eso tiene m√©todos para depositar y retirar dinero de una cuenta bancaria, y debe usarse de la siguiente manera:
var account = BankAccount()
account.deposit(amount: 100)

let succes = account.withdraw(amount: 200)

if succes {
    print("Withdrew money successsfully")
} else {
    print("Failed to get the money")
}

/*Swift nos ofrece varias opciones:
 
 Usa private para "no dejar que nada fuera de la estructura use eso".

 Usa 'fileprivate' para "no dejes que nada fuera del archivo actual use eso".

 Usa el 'public' para "dejar que cualquiera, en cualquier lugar, use eso".*/

 
//MARK: - Pagina 2
/// **PROPIEDADES Y METODOS ESTATICOS**

/*Conceptos Clave
 
 - Definici√≥n: Las propiedades y m√©todos est√°ticos se adjuntan a la estructura (o clase) en s√≠ misma, no a instancias particulares de la estructura.
 - Uso: Se usan directamente en la estructura, sin necesidad de crear una instancia.*/

//En primer lugar, echemos un vistazo a un ejemplo simplificado de c√≥mo crear y usar propiedades y m√©todos est√°ticos:
struct School {
    static var studentCount = 0
    
    
    //Definici√≥n de un M√©todo Est√°tico: add(student:) es un m√©todo est√°tico. Puede ser llamado directamente en School sin necesidad de una instancia de School.
    static func add(student: String) {
        print("\(student) joined the school")
        studentCount += 1
    }
}
//Aqu√≠, studentCount y add(student:) son est√°ticos y se usan directamente en School



/// **‚ö†Ô∏è Diferencias entre self y Self:
 
 //self: Se refiere al 'valor' actual de la estructura.
 //Self: Se refiere al 'tipo' actual de la estructura.


/// **Uso de Propiedades y M√©todos Est√°ticos:**

School.add(student: "Taylor Swift") //Aqu√≠, estamos llamando al m√©todo est√°tic '.add(student:)' y accediendo a la propiedad est√°tic 'studentCount' directamente a trav√©s del tipo School.

print(School.studentCount)

/// **Propiedades y M√©todos Est√°ticos
/// *Propiedades Est√°ticas: Son variables o constantes que est√°n asociadas con el tipo (como una clase, estructura o enumeraci√≥n), no con una instancia espec√≠fica de ese tipo.

/// *M√©todos Est√°ticos: Son funciones que pertenecen al tipo y no a una instancia espec√≠fica.



/// *Organizaci√≥n de Datos Comunes:
//Las propiedades est√°ticas pueden almacenar valores compartidos en varias partes de una aplicaci√≥n.*/

struct appData {
    static let version = "1.3 beta 2"
    static let saveFilename = "settings.json"
    static let homeURL = "https://www.hackingwithswift.com"
}
//Apuntes: se usan para datos de una instancia en una estructura.


/// *Creaci√≥n de Datos de Ejemplo:
//SwiftUI se beneficia de ejemplos de datos para mostrar vistas previas de la aplicaci√≥n durante el desarrollo.

struct Employee {
    let username: String
    let password: String
    
    static let example = Employee(username: "cfederighi", password: "hairforceone")
}

/// **Beneficios de Usar Propiedades y M√©todos Est√°ticos
/*
 - Datos Compartidos: Permite definir datos que son compartidos entre todas las instancias de un tipo.
 - Organizaci√≥n: Facilita la organizaci√≥n de datos y funciones que no dependen de una instancia espec√≠fica.
 - Acceso Sencillo: Permite acceder a propiedades y m√©todos sin crear instancias, lo que puede ser √∫til para utilidades, constantes globales, o datos de configuraci√≥n.*/
 
 /// **Restricciones
/*
 -No Pueden Acceder a Propiedades o M√©todos de Instancia: Las propiedades y m√©todos est√°ticos no pueden acceder a propiedades o m√©todos de instancia directamente, ya que no tienen una instancia espec√≠fica a la cual referirse.
 -Inmutabilidad: Si una estructura o clase es declarada como constante, sus propiedades de instancia no pueden ser modificadas, pero las propiedades est√°ticas pueden serlo si no est√°n marcadas como constantes (let).*/

/// *Conclusi√≥n
/*Las propiedades y m√©todos est√°ticos, son herramientas para manejar datos compartidos y crear ejemplos de datos, especialmente √∫tiles en el desarrollo con SwiftUI. Aunque no siempre son necesarios, pueden simplificar el manejo de datos comunes y facilitar el desarrollo de interfaces de usuario mediante datos de ejemplo.
 
 La propiedad static, define elementos que pertenecen al tipo en s√≠ mismo en lugar de a sus instancias. Esto es √∫til para datos y funciones que deben ser accesibles globalmente dentro del contexto del tipo.
 */


//MARK: - Pagina 3
/// **Sumario de struct**

/// **CONCEPTOS CLAVES DE LAS ESTRUCTURAS

/// *Definici√≥n de Estructuras: Se crean utilizando la palabra clave struct.

struct Persona {
    var nombre: String
    var edad:  Int
}

/// **PROPIEDADES Y METODOS

// -Las estructuras pueden contener variables (var) y constantes (let), conocidas como propiedades, y funciones, conocidas como m√©todos.

// -Si un m√©todo modifica las propiedades de su estructura, debe ser marcado como mutating.


/// **Propiedades Computadas:

// -Las propiedades pueden almacenar valores en memoria o ser calculadas cada vez que se acceden.

struct Rectangulo {
    var ancho: Double
    var alto: Double
    var area: Double {
        return ancho * alto
    }
}

/// **OBSERVADORES DE PROPIEDADES

// -'didSet' y 'willSet' permiten ejecutar c√≥digo cuando una propiedad cambia.

struct Cuenta {
    var saldo: Double {
        willSet {
            print("El saldo cambiar√° a \(newValue)")
        }
        didSet {
            print("El saldo cambi√≥ de \(oldValue) a \(saldo)")
        }
    }
}

/// **INICIALIZADORES**

// -Swift genera un inicializador para todas las estructuras utilizando los nombres de las propiedades.

// -Puedes crear inicializadores personalizados, pero todas las propiedades deben tener un valor antes de que el inicializador termine.
struct Persona2 {
    var nombre: String
    var edad: Int
    
    init(nombre: String, edad: Int) {
        self.nombre = nombre
        self.edad = edad
    }
}

/// **Acceso a Propiedades y M√©todos:**

// -Puedes marcar propiedades y m√©todos como disponibles o no disponibles externamente seg√∫n se necesite.


/// **PROPIEDADES Y METODOS ESTATICOS**

// -Se pueden adjuntar propiedades o m√©todos directamente a una estructura para usarlos sin crear una instancia.

struct Contador {
    static var cuenta = 0
    
    static func incrementar() {
        cuenta += 1
    }
}

Contador.incrementar()
print(Contador.cuenta)

//MARK: -CheckPoint 6

/*Creas una estructura para almacenar informaci√≥n sobre un coche, incluido su modelo, el n√∫mero de asientos y el equipo actual, y luego agregue un m√©todo para cambiar los engranajes hacia arriba o hacia abajo. Piensa en las variables y el control de acceso: ¬øqu√© datos deben ser una variable en lugar de una constante, y qu√© datos deben exponerse p√∫blicamente? ¬øDeber√≠a el m√©todo de cambio de marchas validar su entrada de alguna manera?*/

struct Coche {
    let modelo: String
    let numeroDeAsientos: Int
    private(set) var engranajeActual: Int
    
    //Inicializador personalizado para establecer propiedades
    init(modelo: String, numeroDeAsientos: Int, engranajeActual: Int) {
        self.modelo = modelo
        self.numeroDeAsientos = numeroDeAsientos
        self.engranajeActual = engranajeActual
    }
    
    //Metodo para cambiar las marchas hacia arriba
    mutating func subirMarcha() {
        if engranajeActual < 10 {
            engranajeActual += 1
        } else {
            print("No se puede subir mas de marcha 10")
        }
    }
    //Metodo para cambiar la marcha hacia abajo
    mutating func bajarMarcha() {
        if engranajeActual > 1 {
            engranajeActual -= 1
        } else {
            print("No se puede bajar por debajo de la marcha 1")
        }
    }
}

/// **Ejemplo de Uso

//Ahora, veamos c√≥mo usar esta estructura: üëá
var miCoche = Coche(modelo: "Audi Q5", numeroDeAsientos: 5, engranajeActual: 1)

// Cambiando de marcha
miCoche.subirMarcha()
print(miCoche.engranajeActual)

miCoche.bajarMarcha()
print(miCoche.engranajeActual)

// Intentar bajar de marcha mas alla del limite
miCoche.bajarMarcha()
