import Foundation

//MARK: - Pagina 1
/// **VALORES PREDETERMINADOS**

//Agregar parÃ¡metros a las funciones nos permite agregar puntos de personalizaciÃ³n, para que las funciones puedan operar con diferentes datos dependiendo de nuestras necesidades. A veces queremos que estos puntos de personalizaciÃ³n estÃ©n disponibles para mantener nuestro cÃ³digo flexible, pero otras veces no quieres pensar en ello, quieres lo mismo nueve de cada diez veces.

//Por ejemplo, anteriormente vimos esta funciÃ³n:
func printTimesTables(for number: Int, end: Int) {
    for i in 1...end {     // comienza con el numero 1, hasta el infinito.
        print("\(i) x \(number) is \(i * number)")
    }
}

printTimesTables(for: 5, end: 20)

//
func printTimesTables2(for number: Int, end: Int = 12) {
    for i in 1...end {
        print("\(i) x \(number) is \(i * number)")
    }
}

printTimesTables2(for: 5, end: 20)
printTimesTables2(for: 8)



var characters = ["Lana", "Pam", "Ray", "Sterling"]
print(characters.count)

characters.removeAll()
print(characters.count)


characters.removeAll(keepingCapacity: true)


//MARK: - Pagina 2

enum PasswordError: Error {
    case short, obvious
}


func checkPassword(_ password: String) throws -> String {
    if password.count < 5 {
        throw PasswordError.short
    }
    if password == "12345" {
        throw PasswordError.obvious
    }
    if password.count < 8 {
        return "OK"
    } else if password.count < 10 {
        return "Good"
    } else {
        return "Excellent"
    }
}

/*Vamos a desglosar eso...
 
 If a function is able to throw errors without handling them itself, you must mark the function as throws before the return type.
 No especificamos exactamente quÃ© tipo de error lanza la funciÃ³n, solo que puede generar errores.
 Being marked with throws does not mean the function must throw errors, only that it might.
 When it comes time to throw an error, we write throw followed by one of our PasswordError cases. This immediately exits the function, meaning that it wonâ€™t return a string.
 Si no se lanzan errores, la funciÃ³n debe comportarse como de costumbre: debe devolver una cadena.*/


/*El paso final es ejecutar la funciÃ³n y manejar cualquier error que pueda ocurrir. Los Swift Playgrounds son bastante laxos con el manejo de errores porque estÃ¡n destinados principalmente al aprendizaje, pero cuando se trata de trabajar con proyectos reales de Swift, encontrarÃ¡s que hay tres pasos:
 
 Iniciando un bloque de trabajo que podrÃ­a lanzar errores, usando do.
 Llamar a una o mÃ¡s funciones de lanzamiento, usando try.
 Manejar cualquier error lanzado usando catch.*/

// Enpseudocodigo se ve asi: ðŸ‘‡
/*do {
    try someRiskyWork()
} catch {
    print("Handle error here")
}*/

// Si quisiÃ©ramos escribir, usando nuestra funciÃ³n actual checkPassword(), podrÃ­amos escribir esto.
let string = "12345"

do {
    let result = try checkPassword(string)
    print("Password rating: \(result)")
} catch {
    print("There was an error.")
}

//Si la funciÃ³n checkPassword() funciona correctamente, devolverÃ¡ un valor en el resultado, que luego imprimirÃ¡. Pero si se produce algÃºn error (que en este caso habrÃ¡), el mensaje de clasificaciÃ³n de la contraseÃ±a nunca se imprimirÃ¡; la ejecuciÃ³n saltarÃ¡ inmediatamente al bloque de captura.

//Cuando usas try, necesitas estar dentro de un bloque to 'do', y asegurarte de tener uno o mÃ¡s bloques de captura capaces de manejar cualquier error. Â¡En algunas circunstancias puedes usar una alternativa escrita como 'try!' Que no requiere hacer y capturar, pero bloquearÃ¡ su cÃ³digo si se lanza un error - debe usar esto rara vez, y solo si estÃ¡ absolutamente seguro de que no se puede lanzar un error.

/// *Cuando se trata de detectar errores, siempre debe tener un bloque de captura que sea capaz de manejar todo tipo de errores. Sin embargo, tambiÃ©n puedes detectar errores especÃ­ficos.*
///
let string2 = "12345"

do {
    let result2 = try checkPassword(string)
    print("Password rating \(result2)")
          } catch PasswordError.short {
        print("Please use a longer password")
    } catch PasswordError.obvious {
        print("I have the same combination on my luggage!")
    } catch {
        print("The was an error.")
    }

/// *Consejo: La mayorÃ­a de los errores lanzados por Apple proporcionan un mensaje significativo que puede presentar a su usuario si es necesario. Swift hace que esto estÃ© disponible utilizando un valor de error que se proporciona automÃ¡ticamente dentro de su bloque de captura, y es comÃºn leer error.localizedDescription para ver exactamente lo que sucediÃ³.*

//MRAK: - Checkpoint 4

enum ErrorDeRaizCuadrada: Error {
    case fueraDeRango
    case sinRaiz
}

func raizCuadradaEntera(_ numero: Int) throws -> Int {
    guard (1...10_000).contains(numero) else {
        throw ErrorDeRaizCuadrada.fueraDeRango
    }
    
    guard numero >= 0 else {
        throw ErrorDeRaizCuadrada.sinRaiz
    }
    
    var bajo = 0
    var alto = numero
    
    while bajo <= alto {
        let medio = (bajo + alto) / 2
        let cuadrado = medio * medio
        
        if cuadrado == numero {
            return medio
        } else if cuadrado < numero {
            bajo = medio + 1
        } else {
            alto = medio - 1
        }
    }
    
    throw ErrorDeRaizCuadrada.sinRaiz
}

// Ejemplo
do {
    let resultado = try raizCuadradaEntera(25) // Esto devolverÃ¡ 5
    print("RaÃ­z cuadrada: \(resultado)")
    
    let resultado2 = try raizCuadradaEntera(17) // Esto lanzarÃ¡ un error sinRaiz
    print("RaÃ­z cuadrada: \(resultado2)")
    
    let resultado3 = try raizCuadradaEntera(10001) // Esto lanzarÃ¡ un error fueraDeRango
    print("RaÃ­z cuadrada: \(resultado3)")
} catch let error {
    print("Error: \(error)")
}

