import Foundation

/// **Tipos de datos**

/// *Swift es capaz de averiguar qu칠 tipo de datos tiene una constante o variable en funci칩n de lo que le asignamos. Sin embargo, a veces no queremos asignar un valor de inmediato, o a veces queremos dejar vacio y no le asignamos un valor, y ah칤 es donde entran en anotaciones de tipo.

let surname = "Lasso"
var score = 0
//Esto utiliza la inferencia de tipo: Swift infiere que 'surname' es una cadena porque le estamos asignando texto, y luego infiere que 'score' es un entero porque le estamos asignando un n칰mero entero.


//Los tipos de datos nos permiten ser expl칤citos sobre qu칠 tipos de datos queremos.
let surname2: String = "Lasso"
var score2: Int = 0

//Ahora estamos siendo expl칤citos: 'surname' debe ser un 'String' y 'score' debe ser un Int. Eso es la inferencia de tipo de Swift.

//por ejemplo, tal vez la puntuaci칩n sea un decimal porque el usuario puede obtener medio punto, as칤 que escribiremos:
var score3: Double = 0

//游녡Sin los ': Double', Swift inferir칤a que es un entero, pero estamos anulando eso y diciendo que definitivamente es un n칰mero decimal.


/// *Hemos analizado algunos tipos de datos hasta ahora, y es importante que conozcas sus nombres para que puedas usar la inferencia de tipo correcta cuando sea necesario.

// 'String' contiene texto
let playerName: String = "Roy"

// 'Int' numeros enteros
var luckyNumber: Int = 13

// 'Double' numeros decimales
let pi: Double = 3.141

// 'Booleano' verdadero o falso
var isAuthenticated: Bool = true


/// *Un 'Array' tiene muchos valores diferentes, todos en el orden en que los agregas. Esto debe ser especializado, como [String]
var albums: [String] = ["Red", "Fearless"]

/// *Un 'Dictionary' tiene muchos valores diferentes, donde se puede decidir c칩mo se debe acceder a los datos. Esto debe ser especializado, como [String: Int] [calve: valor]
var user: [String: String] = ["id": "@twostraws"]

/// *Los 'Set' contiene muchos valores diferentes, pero los almacena en un orden que est치 optimizado para comprobar lo que contiene. Esto debe ser especializado, como Set<String>:
var books: Set<String> = Set(["The bluest Eye", "Foundation", "Girl, Woman, Other"])


//Conocer todos estos tipos es importante para depende que momentos en los que no quieres proporcionar valores iniciales. Por ejemplo, esto crea una matriz de cadenas:
var soda: [String] = ["Coke", "Pepsi", "Irn-Bru"]


/// *No se necesita una onferencia de tipo aqui, porque Swift puede ver que est치s asignando una matriz de cadenas. Sin embargo, si quisieras crear una matriz vac칤a de 'String', necesitar칤as saber el tipo:
var cities:  [String] = [String]()

/// **Diferencias de constructor del tipo y inferencia del tipo.

/// **Constructor del Tipo
/// *La anotaci칩n del tipo implica que declaras expl칤citamente el tipo de una variable al momento de su definici칩n. Esto se hace utilizando dos puntos seguido del tipo deseado.
///
// 丘멆잺Tambien podemos hacer una anotacion del tipo de 'String' vacia.
var cities2: [String] = []

/// **Inferencia del Tipo
/// *La inferencia del tipo permite que el compilador determine autom치ticamente el tipo de una variable en funci칩n del valor que se le asigna en la inicializaci칩n. En Swift, el compilador puede deducir el tipo de forma autom치tica sin necesidad de una anotaci칩n expl칤cita.

var clues = [String]() // 丘멆잺Recuerda, de agregar los par칠ntesis abiertos y cerrados al hacer 'Arrays', 'Diccionarios' y 'Set' vac칤os.



/// **enum**
/// *Los 'enum'(abreviatura de enumeraci칩n) es un tipo de datos que te permite definir un grupo de valores relacionados. Un enum define un conjunto de opciones o casos posibles, donde cada caso representa un valor distinto dentro de ese conjunto. Los enums son 칰tiles cuando quieres representar un conjunto fijo de opciones o estados dentro de tu c칩digo.*

enum UIStyle {
    case light, dark, system
}

var style = UIStyle.light


//La excepci칩n m치s com칰n a esto es con las constantes para las que a칰n no tengan valor. Swift es realmente inteligente: puedes crear una constante que a칰n no tiene un valor, m치s tarde proporciona ese valor, y Swift se asegurar치 de que no la usemos accidentalmente hasta que haya un valor presente. Tambi칠n se asegurar치 de que solo establezca el valor una vez, para que permanezca constante.
let username: String

username = "@twostrws"

print(username)
/*Ese c칩digo es legal: estamos diciendo que el nombre de usuario contendr치 una cadena en alg칰n momento, y proporcionamos un valor antes de usarlo. Si faltaba la l칤nea de asignaci칩n - nombre de usuario = "@twostraws" -, entonces Swift se negar칤a a construir nuestro c칩digo porque el nombre de usuario no tendr칤a un valor, y de manera similar, si intent치ramos establecer un valor para el nombre de usuario por segunda vez, Swift tambi칠n se quejar칤a.

Este tipo de c칩digo requiere una anotaci칩n de tipo, porque sin que se le asigne un valor inicial, Swift no sabe qu칠 tipo de nombre de usuario de datos contendr치.

Independientemente de si usa inferencia de tipo o anotaci칩n de tipo, hay una regla de oro: Swift debe saber en todo momento qu칠 tipos de datos contienen sus constantes y variables. Esto est치 en el centro de ser un lenguaje seguro para el tipo, y nos impide hacer cosas sin sentido como 5 + verdaderas o similares.*/


//En resumen, los enums en Swift son una poderosa herramienta para modelar datos que tienen un conjunto fijo de valores posibles. Permiten escribir un c칩digo m치s claro, seguro y f치cil de mantener al representar de manera expl칤cita las opciones disponibles en tu programa. Los enums son com칰nmente utilizados para representar estados, opciones, categor칤as, y m치s en una aplicaci칩n Swift.


/// **Importante游녢: Aunque la anotaci칩n de tipo puede permitirnos anular la inferencia de tipo de Swift hasta cierto punto, nuestro c칩digo terminado a칰n debe ser posible. Por ejemplo, esto no est치 permitido:**

//let score4: Int = "Zero" //Swift simplemente no puede convertir "Zero" en un entero para nosotros, incluso con una anotaci칩n de tipo que lo solicitamos, por lo que el c칩digo simplemente no se compilar치.



/// **EJERCICIOS**
/// Esta vez, el desaf칤o es crear una 'Array' de 'String', luego escribir algo de c칩digo que imprima el n칰mero de elementos en la 'String' y tambi칠n el n칰mero de elementos 칰nicos en la matriz.

let albums3 = ["Red", "Fearless", "Speak Now", "Red", "1989", "Fearless"] // Aqui creamos una 'Array' de 'Strings

let totalElements = albums3.count //Aqui asignamos 'totalElements' y le decimos que cuente los numeros de elementos que hay en la 'array' con el '.count'

print("N칰mero total de elementos en la matriz: \(totalElements)") // Aqui interpolamos el numero de elementos que tiene una 'Array'
