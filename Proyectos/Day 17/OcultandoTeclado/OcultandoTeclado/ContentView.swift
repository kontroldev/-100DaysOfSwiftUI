//
//  ContentView.swift
//  OcultandoTeclado
//
//  Created by Ra칰l Gallego Alonso on 17/6/24.
//

import SwiftUI

struct ContentView: View {
    @State private var checkAmount = 0.0
    @State private var numberOfPeople = 2
    @State private var tipPercentage = 20
    @FocusState private var amountItFocused: Bool // a침adimos una nueva propiedad para crear un boton.
    
    let tipPercentages = [10, 15, 20, 25, 0]
    
    var totalPerPerson: Double {
        let peopleCount = Double(numberOfPeople + 2)
        let tipSelection = Double(tipPercentage)
        
        let tipValue = checkAmount / 100 * tipSelection
        let grandTotal = checkAmount + tipValue
        let amountPerPerson = grandTotal / peopleCount
        
        return amountPerPerson
    }
    
    var body: some View {
        NavigationStack {
            Form {
                Section {
                    TextField("Amount", value: $checkAmount, format: .currency(code: Locale.current.currency?.identifier ?? "USD"))
                        .keyboardType(.decimalPad)
                        .focused($amountItFocused) // Ahora podemos adjuntar eso a nuestro campo de texto, de modo que cuando el campo de texto est칠 enfocado, 'amountIsFocused' sea verdadero; de lo contrario, ser치 falso.
                    
                    Picker("Number of people", selection: $numberOfPeople) {
                        ForEach(2..<100) {
                            Text("\($0) people")
                        }
                    }
                }
                //creamos una nueva seccion con un texto y dentro del el otra seleccion con la constante de porcentaje de 10,15,20,etc etc, mirar arriba el let 游녡.
                Section {
                    Picker("Tip percentage", selection: $tipPercentage) {
                        ForEach(tipPercentages, id: \.self) {
                            /* la linea de arriba: itera sobre la colecci칩n tipPercentages.
                             Genera una vista para cada elemento en la colecci칩n.
                             Usa el propio valor del elemento como su identificador 칰nico, lo que es apropiado cuando los elementos son 칰nicos y conforman el protocolo Hashable '$'.*/
                            Text($0, format: .percent)
                            // es un closure que especifica que el valor debe ser formateado como un porcentaje.
                        }
                    }
                    .pickerStyle(.segmented) //Este modificador aplica el estilo segmentado a un Picker. lo pone como en una barra si lo comnetas se vera el desplegable.
                }
                Section {
                    Text(totalPerPerson, format: .currency(code: Locale.current.currency?.identifier ?? "USD"))
                }
            }
            .navigationTitle("WeSplit")
            .toolbar {
                if amountItFocused {
                    Button("Done") {
                        amountItFocused = false
                       /* 1.El modificador 'toolbar()' nos permite especificar elementos de la barra de herramientas para una vista. Estos elementos de la barra de herramientas pueden aparecer en varios lugares de la pantalla, como en la barra de navegaci칩n en la parte superior, en un 치rea especial de la barra de herramientas en la parte inferior, y as칤 sucesivamente.
                        
                        2.La condici칩n verifica si `amountIsFocused` es actualmente verdadero, por lo que solo mostramos el bot칩n cuando el campo de texto est치 activo.

                        3.La vista 'Button' que estamos utilizando aqu칤 muestra un texto que se puede tocar, que en nuestro caso es "Done". Tambi칠n necesitamos proporcionarle alg칰n c칩digo para ejecutar cuando se presione el bot칩n, que en nuestro caso establece `amountIsFocused` en falso para que el teclado se oculte.*/
                    }
                }
            }
        }
    }
}

#Preview {
    ContentView()
}
